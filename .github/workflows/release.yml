name: Create Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
        restore-keys: npm-${{ runner.os }}-

    - name: Install dependencies
      run: npm install

    - name: Get package version
      id: get_version
      run: |
        VERSION=$(node -e "console.log(require('./package.json').version)")
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Check for existing release
      id: check_release
      uses: actions/github-script@v7
      env:
        VERSION: ${{ env.VERSION }}
      with:
        script: |
          const { VERSION } = process.env;
          console.log(`Checking for existing release: v${VERSION}`);

          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });

          const existingRelease = releases.find(r => r.tag_name === `v${VERSION}`);

          if (existingRelease) {
            if (existingRelease.draft) {
              console.log(`Draft release v${VERSION} exists. Deleting it...`);
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: existingRelease.id,
              });
            } else {
              console.error(`Release v${VERSION} already exists.`);
              core.setFailed(`Release v${VERSION} already exists.`);
            }
          }

    - name: Build project
      run: npm run build

    - name: Run sense
      run: npm run sense

    - name: Zip extension
      run: zip -r user-agent-reporter.zip user-agent-reporter-ext

    - name: Upload release asset
      uses: softprops/action-gh-release@v1
      with:
        files: ./user-agent-reporter.zip
        tag_name: v${{ env.VERSION }}
        draft: true

    - name: Post release link
      run: 'echo "âœ… Release created successfully: https://github.com/${{ github.repository }}/releases/tag/v${{ env.VERSION }}"'
